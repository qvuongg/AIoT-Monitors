"""add password to device

Revision ID: 423f32cac2a1
Revises: 
Create Date: 2025-05-29 09:56:35.492504

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '423f32cac2a1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alerts')
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_audit_logs_user_id')

    op.drop_table('audit_logs')
    op.drop_table('scheduled_monitoring')
    with op.batch_alter_table('command_lists', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint('command_lists_created_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])

    with op.batch_alter_table('command_logs', schema=None) as batch_op:
        batch_op.alter_column('session_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('executed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('success', 'failed', 'pending', name='command_status'),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.drop_index('idx_command_logs_device_id')
        batch_op.drop_index('idx_command_logs_executed_at')
        batch_op.drop_index('idx_command_logs_session_id')
        batch_op.drop_index('idx_command_logs_user_id')
        batch_op.drop_constraint('command_logs_session_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('command_logs_user_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('command_logs_device_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'devices', ['device_id'], ['device_id'])
        batch_op.create_foreign_key(None, 'sessions', ['session_id'], ['session_id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['user_id'])

    with op.batch_alter_table('commands', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint('commands_list_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('commands_created_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])
        batch_op.create_foreign_key(None, 'command_lists', ['list_id'], ['list_id'])

    with op.batch_alter_table('device_groups', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint('device_groups_created_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('password', sa.String(length=100), nullable=True))
        batch_op.alter_column('last_checked_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('assigned_by',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID người dùng đã gán thiết bị vào nhóm, khác với created_by là người tạo thiết bị',
               existing_nullable=True)
        batch_op.drop_index('idx_devices_assigned_by')
        batch_op.drop_index('idx_devices_group_id')
        batch_op.drop_constraint('devices_group_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('devices_assigned_by_fkey', type_='foreignkey')
        batch_op.drop_constraint('devices_created_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])
        batch_op.create_foreign_key(None, 'device_groups', ['group_id'], ['group_id'])
        batch_op.create_foreign_key(None, 'users', ['assigned_by'], ['user_id'])

    with op.batch_alter_table('file_edit_logs', schema=None) as batch_op:
        batch_op.alter_column('session_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('edit_started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('edit_finished_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_constraint('file_edit_logs_session_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('file_edit_logs_user_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('file_edit_logs_device_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['user_id'])
        batch_op.create_foreign_key(None, 'devices', ['device_id'], ['device_id'])
        batch_op.create_foreign_key(None, 'sessions', ['session_id'], ['session_id'])

    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.alter_column('group_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('list_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint('profiles_created_by_fkey', type_='foreignkey')
        batch_op.drop_constraint('profiles_group_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('profiles_list_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])
        batch_op.create_foreign_key(None, 'device_groups', ['group_id'], ['group_id'])
        batch_op.create_foreign_key(None, 'command_lists', ['list_id'], ['list_id'])

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('device_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('start_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('end_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('active', 'completed', 'terminated', name='session_status'),
               type_=sa.String(length=20),
               nullable=False,
               existing_server_default=sa.text("'active'::session_status"))
        batch_op.drop_index('idx_sessions_device_id')
        batch_op.drop_index('idx_sessions_status')
        batch_op.drop_index('idx_sessions_user_id')
        batch_op.drop_constraint('sessions_user_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('sessions_terminated_by_fkey', type_='foreignkey')
        batch_op.drop_constraint('sessions_device_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['terminated_by'], ['user_id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['user_id'])
        batch_op.create_foreign_key(None, 'devices', ['device_id'], ['device_id'])

    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('profile_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index('idx_user_profiles_user_id')
        batch_op.drop_constraint('user_profiles_assigned_by_fkey', type_='foreignkey')
        batch_op.drop_constraint('user_profiles_profile_id_fkey', type_='foreignkey')
        batch_op.drop_constraint('user_profiles_user_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['assigned_by'], ['user_id'])
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['user_id'])
        batch_op.create_foreign_key(None, 'profiles', ['profile_id'], ['profile_id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=64),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=120),
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=128),
               existing_nullable=False)
        batch_op.alter_column('role',
               existing_type=postgresql.ENUM('admin', 'team_lead', 'supervisor', 'operator', name='user_role'),
               type_=sa.String(length=20),
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('last_login',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.drop_constraint('users_created_by_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['user_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('users_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('last_login',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('role',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('admin', 'team_lead', 'supervisor', 'operator', name='user_role'),
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('user_profiles_user_id_fkey', 'users', ['user_id'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('user_profiles_profile_id_fkey', 'profiles', ['profile_id'], ['profile_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('user_profiles_assigned_by_fkey', 'users', ['assigned_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_index('idx_user_profiles_user_id', ['user_id'], unique=False)
        batch_op.alter_column('assigned_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('profile_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('sessions_device_id_fkey', 'devices', ['device_id'], ['device_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('sessions_terminated_by_fkey', 'users', ['terminated_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('sessions_user_id_fkey', 'users', ['user_id'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_index('idx_sessions_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_sessions_status', ['status'], unique=False)
        batch_op.create_index('idx_sessions_device_id', ['device_id'], unique=False)
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('active', 'completed', 'terminated', name='session_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::session_status"))
        batch_op.alter_column('end_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('start_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('device_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('profiles_list_id_fkey', 'command_lists', ['list_id'], ['list_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('profiles_group_id_fkey', 'device_groups', ['group_id'], ['group_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('profiles_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('list_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('group_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('file_edit_logs', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('file_edit_logs_device_id_fkey', 'devices', ['device_id'], ['device_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('file_edit_logs_user_id_fkey', 'users', ['user_id'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('file_edit_logs_session_id_fkey', 'sessions', ['session_id'], ['session_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('edit_finished_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('edit_started_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('session_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('devices_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('devices_assigned_by_fkey', 'users', ['assigned_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('devices_group_id_fkey', 'device_groups', ['group_id'], ['group_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_index('idx_devices_group_id', ['group_id'], unique=False)
        batch_op.create_index('idx_devices_assigned_by', ['assigned_by'], unique=False)
        batch_op.alter_column('assigned_by',
               existing_type=sa.INTEGER(),
               comment='ID người dùng đã gán thiết bị vào nhóm, khác với created_by là người tạo thiết bị',
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('last_checked_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.drop_column('password')

    with op.batch_alter_table('device_groups', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('device_groups_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('commands', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('commands_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('commands_list_id_fkey', 'command_lists', ['list_id'], ['list_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('command_logs', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('command_logs_device_id_fkey', 'devices', ['device_id'], ['device_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('command_logs_user_id_fkey', 'users', ['user_id'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_foreign_key('command_logs_session_id_fkey', 'sessions', ['session_id'], ['session_id'], initially='DEFERRED', deferrable=True)
        batch_op.create_index('idx_command_logs_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_command_logs_session_id', ['session_id'], unique=False)
        batch_op.create_index('idx_command_logs_executed_at', ['executed_at'], unique=False)
        batch_op.create_index('idx_command_logs_device_id', ['device_id'], unique=False)
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('success', 'failed', 'pending', name='command_status'),
               existing_nullable=True)
        batch_op.alter_column('executed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('session_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('command_lists', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('command_lists_created_by_fkey', 'users', ['created_by'], ['user_id'], initially='DEFERRED', deferrable=True)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    op.create_table('scheduled_monitoring',
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], name='scheduled_monitoring_created_by_fkey', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name='scheduled_monitoring_device_id_fkey', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='scheduled_monitoring_user_id_fkey', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('schedule_id', name='scheduled_monitoring_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('audit_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='audit_logs_user_id_fkey', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('audit_id', name='audit_logs_pkey')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_audit_logs_user_id', ['user_id'], unique=False)

    op.create_table('alerts',
    sa.Column('alert_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('alert_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name='alerts_device_id_fkey', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.user_id'], name='alerts_resolved_by_fkey', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='alerts_user_id_fkey', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('alert_id', name='alerts_pkey')
    )
    # ### end Alembic commands ###
